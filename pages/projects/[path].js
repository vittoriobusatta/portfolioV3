import Head from "next/head";
import React, { useContext, useEffect, useRef, useState } from "react";
import Header from "@/components/Header";
import { GeneralContext } from "store/context";
import Image from "next/image";
import ProjectHead from "@/components/Projects/ProjectHead";
import Typography from "@/components/Projects/Typography";
import AboutProject from "@/components/Projects/AboutProject";
import ProjectView from "@/components/Projects/ProjectView";
import data from "../../public/db.json";
import { motion } from "framer-motion";
import Transition from "utils/transitions";


function Product({ projects }) {
  const { language } = useContext(GeneralContext);

  const [logoColor, setColor2] = useState(projects.color2);
  const button = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting === false) {
          setColor2(projects.color);
        } else return setColor2(projects.color2);
      });
    });

    observer.observe(button.current);

    return () => observer.disconnect();
  }, []);

  return (
    <>
      <Head>
        <title>{projects.name} | Vittorio Busatta</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="theme-color" content={projects.color} />
      </Head>

      <Header
        logoColor={logoColor}
        color={projects.color}
        color2={projects.color2}
      />

      <motion.section
        initial={{
          opacity: 0,
        }}
        animate={{
          opacity: 1,
        }}
        transition={{ duration: 0.15, ease: "easeOut" }}
        className="projects"
        style={{
          backgroundColor: projects.color2,
          "--color": projects.color,
          "--color2": projects.color2,
          "--placeholder": projects.placeholder,
          "--paragraph": projects.paragraph,
        }}
      >
        <ProjectHead projects={projects} button={button} language={language} />
        <div className="projects__content">
          {projects.aboutproject && (
            <AboutProject projects={projects} language={language} />
          )}
          {projects.viewproject && (
            <ProjectView projects={projects} language={language} />
          )}
          {projects.typographyproject && (
            <Typography
              typo={projects.typographyproject}
              language={language}
              name={projects.path}
              typographyproject={projects.typographyproject}
            />
          )}
        </div>
        {projects.otherproject && (
          <div className="projects__other">
            <Image
              src={projects.otherproject.images.src}
              alt={projects.otherproject.images.alt}
              width={1512}
              height={1612}
              priority
            />
          </div>
        )}
      </motion.section>
    </>
  );
}

export default Transition(Product);

export async function getStaticProps({ params }) {
  const { path } = params;
  let projects = data.find((item) => item.path === path);
  return { props: { projects } };
}

export async function getStaticPaths() {
  const paths = data.map((item) => ({
    params: { path: item.path.toString() },
  }));
  return { paths, fallback: false };
}
