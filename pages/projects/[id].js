import Head from "next/head";
import React, { useContext, useEffect, useRef, useState } from "react";
import fs from "fs";
import Header from "@/components/Header";
import { LanguageContext } from "utils/translate";
import Image from "next/image";

export default function Product({ projects }) {
  // const paths = data.map((item) => ({
  //   params: { path: item.path.toString() },
  // }));

  // let path = paths.find((item) => item.params.path === projects.path);

  const [logoColor, setColor2] = useState(projects.color2);
  const { language } = useContext(LanguageContext);

  const button = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting === false) {
          setColor2(projects.color);
        } else return setColor2(projects.color2);
      });
    });

    observer.observe(button.current);

    return () => observer.disconnect();
  }, []);

  const landingList = Object.entries(projects).filter(
    ([key]) =>
      key === "type" ||
      key === "date" ||
      key === "role" ||
      key === "technologies"
  );

  return (
    <>
      <Head>
        <title>{projects.name} | Vittorio Busatta</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header
        logoColor={logoColor}
        color={projects.color}
        color2={projects.color2}
      />

      <section
        className="projects"
        style={{ backgroundColor: projects.background }}
      >
        <div
          style={{ backgroundColor: projects.color, color: projects.color2 }}
          className="projects__landing"
          ref={button}
        >
          <h1 className="landing__title">{projects.name}</h1>
          <ul className="landing__list">
            {landingList.map((item, index) => (
              <li key={index} className="landing__item">
                <div className="landing__item__inner">
                  <h4>{item[0]}</h4>
                  <p>{item[1][language] ? item[1][language] : item[1]}</p>
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div style={{ color: projects.color }} className="projects__content">
          <div className="projects__about">
            <div
              style={{
                display: "inline-flex",
                alignItems: "center",
              }}
            >
              <svg
                data-v-669b4a84=""
                viewBox="0 0 12 12"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                height="12"
              >
                <path
                  data-v-669b4a84=""
                  d="M7.41908 4.56679L6.13722 0L4.85418 4.92566L0 6L4.85418 7.25435L6.13722 12L7.3276 7.25435L12 6L7.41908 4.56679Z"
                  fill="currentColor"
                ></path>
              </svg>
              <h4 className="projects__about__subtitle">
                {projects.article.subtitle[language]}
              </h4>
            </div>
            <h3 className="projects__about__title">
              {projects.article.title[language]}
            </h3>
            <p className="projects__about__description">
              {projects.article.about[language]}
            </p>
          </div>
          <div className="projects__images">
            <Image
              src={projects.article.images.img1.src}
              alt={projects.article.images.img1.alt}
              width={385}
              height={481}
            />
            <Image
              src={projects.article.images.img2.src}
              alt={projects.article.images.img2.alt}
              width={385}
              height={481}
            />
          </div>
        </div>
      </section>
    </>
  );
}

export async function getStaticProps({ params }) {
  const data = await JSON.parse(fs.readFileSync("./public/db.json", "utf-8"));
  const { id } = params;
  let projects = data.find((item) => item.id === parseInt(id));
  return { props: { data, projects } };
}

export async function getStaticPaths() {
  const data = await JSON.parse(fs.readFileSync("./public/db.json", "utf-8"));
  const paths = data.map((item) => ({
    params: { id: item.id.toString() },
  }));
  return { paths, fallback: false };
}
